// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  pratica
  class
  workshop
  party
  festival
}

enum Frequency {
  daily
  weekly
  biweekly
  monthly
}

enum ValidationStatus {
  pending
  validated
  rejected
}

enum Role {
  contributor
  teacher
  student
  admin
}

model Event {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  title             String           @db.VarChar(255)
  start_at          DateTime         @db.Timestamp
  end_at            DateTime?        @db.Timestamp
  frequency         Frequency?
  excluded_on       DateTime[]       @db.Date
  url               String?
  imageDataUrl      String?          @map("image_data_url")
  city              String           @db.VarChar(255)
  country           String           @db.VarChar(255)
  categories        Category[]
  validation_status ValidationStatus @default(pending)

  @@map("event")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         Role[]
  subscriptions Subscriber[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Subscription {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  title       String
  description String
  slug        String       @unique
  active      Boolean      @default(false)
  public      Boolean      @default(false)
  nextRun     DateTime     @map("next_run") @db.Timestamp
  lastRun     DateTime?    @map("last_run") @db.Timestamp
  frequency   Frequency
  templateId  Int?         @map("template_id")
  roles       Role[]       @default([])
  subscribers Subscriber[]

  @@map("subscription")
}

model Subscriber {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId Int          @map("subscription_id")
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, userId])
  @@map("subscriber")
}
